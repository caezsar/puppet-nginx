# MANAGED BY PUPPET via Matei cezar


## Upstream proxies

<% @upstream_servers.sort_by {|key, value| key}.each do |key,value| -%>
	upstream <%= key %> {
<% value.each do |line| -%>
	<%= line %>;
<% end -%>
}
<% end -%>

# Declare the first instance of the server on port 80 and redirect all requests to HTTPS

server {
    listen 80;
    server_name <%= @domain_name %><% unless @domain_alias.to_s.strip.empty? -%> <%= @domain_alias %><% end -%>;
    return 301 https://$host$request_uri;
}

# No I Declare the HTTPS server for domain.com

server {

    listen 443 ssl;

# The domain name
    server_name <%= @domain_name %><% unless @domain_alias.to_s.strip.empty? -%> <%= @domain_alias %><% end -%>;

# The certificates are not valid and are only declared for testing purposes 
#ssl_certificate /etc/nginx/ssl/cert.crt;
#ssl_certificate_key /etc/nginx/ssl/privkey.key;
ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

# Some SSL best practices
    ssl on;
    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;
    ssl_prefer_server_ciphers on;


# This is where the log file is stored
    access_log            /var/log/nginx/<%= @domain_name %>_access.log;
    error_log             /var/log/nginx/<%= @domain_name %>_error.log;

<% if @location_set == true -%>

<% @locations.each do |x| -%>
location <%= x["loc_name"] %> {
    proxy_pass    <%= x["proxy_pass"] %>;
<% if x['proxy_set_header'] -%>    proxy_set_header    <%= x['proxy_set_header'] %>;<% end -%>		
<% if x['proxy_set_header1'] -%>    proxy_set_header    <%= x['proxy_set_header1'] %>;<% end -%>	
<% if x['proxy_set_header2'] -%>    proxy_set_header    <%= x['proxy_set_header2'] %>;<% end -%>	
<% if x['proxy_set_header3'] -%>    proxy_set_header    <%= x['proxy_set_header3'] %>;<% end -%>		
<% if x['proxy_read_timeout'] -%>    proxy_read_timeout    <%= x['proxy_read_timeout'] %>;<% end -%>		
<% if x['proxy_redirect'] -%>    proxy_redirect    <%= x['proxy_redirect'] %> https://<%= @domain_name %><%= x["loc_name"] %>;<% end -%>	
    }

<% end -%>
<% else %> 
# If the @location_set is not set-up, skip with default Nginx location block and set the filesystem webroot path and indexes

      root /var/www/html/<%= @domain_name %>;
               index index.php index.html index.cgi;
               autoindex on;
               autoindex_format html;

     location / {

        try_files $uri $uri/ =404;
        }

<% end -%>
  }



