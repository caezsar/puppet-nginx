---
classes:
 - nginx
 - nginx::fproxy

# First added Nginx to classes 
# This will just install a nginx server on the system with default configurations provided by the distro, not tampering at all

# Enable nginx domain.conf file in Hiera without any proxy redirection ( by default only install nginx, not enable domain file)
nginx::enable_domain_conf: true
# Specify the name of the domain and an alias if that's the case.
nginx::domain_name: 'domain.com'
nginx::domain_alias: 'www.domain.com'
# Define some upstream  servers. 
nginx::upstream_servers:
  'to_10.10.10.10':
    - 'server 10.10.10.10:80'
#You can add  as many upstream server as required. Just insert a new array item  containing a server or other  'Passive Health Checks'
  'to_20.20.20.20':
    - 'ip_hash'
    - 'server 20.20.20.20:8080 max_fails=3 fail_timeout=30s'
    - 'server 20.20.20.21:8080 weight=3'
    - 'keepalive 32'
    
# Redirect HTTPS domain.com to the first backend server assuming that the backend server is listening on port 80 
# proxy_pass variable must have the following content Protocol://IP:PORT EX:(string) http://20.20.20.20:80
# Use one of the defined upstream servers from above or just use your own custom proxy
# The first example (the loop function iterates in reverse order here - from bottom to top) uses  direct connection to custom proxy  -  it does not  reference the above  upstream 
nginx::location_set: true
nginx::locations:
  '/resource2':
    proxy_pass: 'http://to_20.20.20.20'
    proxy_set_header: 
       - 'Host $host'
       - 'X-Real-IP $remote_addr'
       - 'X-Forwarded-For $proxy_add_x_forwarded_for'
       - 'X-Forwarded-Proto $scheme'         
    proxy_redirect: 'http://to_20.20.20.20 https://domain.com/resource2/'
    'proxy_read_timeout': '10'
    'proxy_buffering': 'on'
    'proxy_buffer_size': '1k'
    'proxy_buffers 24': '4k'
    'proxy_busy_buffers_size': '8k'
    'proxy_max_temp_file_size': '2048m'
    'proxy_temp_file_write_size': '32k'    
# Add headers cache control options - disable cache in this case
    expires: '-1'
    'add_header Cache-Control': '"no-store"'
    'add_header X-Cache-Status': '$upstream_cache_status'
    'proxy_cache_methods': 'GET HEAD POST'
    'proxy_cache_bypass': '$cookie_nocache $arg_nocache'
 
  '/':
    proxy_set_header: 
       - 'Host $host'
       - 'X-Real-IP $remote_addr'
       - 'X-Forwarded-For $proxy_add_x_forwarded_for'
       - 'X-Forwarded-Proto $scheme'    
    proxy_pass:  'http://10.100.20.240:8080'
    proxy_read_timeout: '10'
#PHP-FPM
  '~ \.php$':
    'try_files $uri': '=404'
    'fastcgi_pass': 'unix:/var/run/php-fpm.socket'
    'fastcgi_index': 'index.php'
    'fastcgi_param': 
      - 'SCRIPT_FILENAME $document_root$fastcgi_script_name'
      - 'HTTP_PROXY  ""'
    'fastcgi_read_timeout': '180'
    'include': '/etc/nginx/fastcgi_params'
    'allow': '127.0.0.1'
    'deny': 'all'

# Status page
  '~ (^/status$)':
    'try_files $uri': '=404'
    'fastcgi_pass': 'unix:/var/run/php-fpm.socket'
    'fastcgi_index': 'index.php'
    'fastcgi_param': 
      - 'SCRIPT_FILENAME $document_root$fastcgi_script_name'
      - 'HTTP_PROXY  ""'
    'fastcgi_read_timeout': '180'
    'include': '/etc/nginx/fastcgi_params'
    'allow': '127.0.0.1'
    'deny': 'all'
# Nginx forward proxy works only for HTTP requests for now!
# First add nginx::fproxy to hiera class.
# Then enable the proxy configuration file. otherwise will not apply or the file will get removed
nginx::fproxy::enable_proxy: true
## You can specify your own values for listen port, resolver and logs. Otherwise use defaults set-up via the module file
## Change listening port
nginx::fproxy::listen_port: '8090'
## Change resolver
nginx::fproxy::resolver: '8.8.8.8'
